package com.employeemanagement.demo.model;

import java.util.Date;
import java.util.Set;

import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.GeneratedValue;
import javax.persistence.GenerationType;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.JoinTable;
import javax.persistence.ManyToMany;

import com.fasterxml.jackson.annotation.JsonProperty;

import io.swagger.v3.oas.annotations.media.Schema;
import lombok.Data;

/**
 * Model class for Employee entity
 * 
 * @author 2144388
 */
@Data
@Entity
@Schema(description = "Employee Model Information")
public class Employee {

	/**
	 * Unique auto-generated Employee ID
	 */
	@Schema(accessMode = Schema.AccessMode.READ_ONLY, description = "Autogenerated Employee Id")
	@Id
	@GeneratedValue(strategy = GenerationType.IDENTITY)
	@Column(name = "employee_id")
	private Long employeeId;

	/**
	 * Unique email ID
	 */
	@Schema(description = "Email ID of employee")
	@Column(name = "email_id", nullable = false, unique = true)
	private String emailId;

	/**
	 * First name of employee
	 */
	@Schema(description = "First name of employee")
	@Column(name = "first_name")
	private String firstName;

	/**
	 * Last name of employee
	 */
	@Schema(description = "Last name of employee")
	@Column(name = "last_name")
	private String lastName;

	/**
	 * Encoded password
	 */
	@Schema(description = "Encoded password")
	@Column(name = "password", nullable = false)
	@JsonProperty(access = JsonProperty.Access.WRITE_ONLY)
	private String password;

	/**
	 * Phone number of employee
	 */
	@Schema(description = "Phone number of employee")
	@Column(name = "phone_number")
	private Long phoneNumber;

	/**
	 * Date of account creation
	 */
	@Schema(description = "Date of account creation")
	@Column(name = "account_creation_date")
	private Date accountCreationDate;

	/**
	 * State of the account
	 */
	@Schema(description = "State of the account")
	@Column(name = "enabled")
	private Boolean enabled;

	/**
	 * Comments/description on the account
	 */
	@Schema(description = "Comments/description on the account")
	@Column(name = "description")
	private String description;

	/**
	 * Email ID of employee who created the account
	 */
	@Schema(description = "Email ID of employee who created the account")
	@Column(name = "account_created_by")
	private String accountCreatedBY;

	/**
	 * Email ID of employee who last updated the account
	 */
	@Schema(description = "Email ID of employee who last updated the account")
	@Column(name = "account_last_modified_by")
	private String accountLastModifiedBy;

	/**
	 * Date of last updation of account
	 */
	@Schema(description = "Date of last updation of account")
	@Column(name = "account_last_modified_date")
	private Date accountLastModifiedDate;

	/**
	 * Date of last login by the account
	 */
	@Schema(description = "Date of last login by the account")
	@Column(name = "last_login_date")
	private Date lastLoginDate;

	/**
	 * Roles assigned to the account
	 */
	@Schema(description = "Roles assigned to the account")
	@ManyToMany(fetch = FetchType.EAGER)
	@JoinTable(name = "employees_roles", joinColumns = @JoinColumn(name = "employee_id"), inverseJoinColumns = @JoinColumn(name = "role_id"))
	private Set<Role> roles;

}
